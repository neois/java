slf4j & logback 설정

MAVEN
아래와 같습니다. 
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>${org.springframework-version}</version>
    <exclusions>
        <!-- Exclude Commons Logging in favor of SLF4j -->
        <exclusion>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
        </exclusion>
    </exclusions>
</dependency>
 
... 
 
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>jcl-over-slf4j</artifactId>
    <version>1.7.7</version>
</dependency>
 
<dependency>
    <groupId>ch.qos.logback</groupId>
    <artifactId>logback-classic</artifactId>
    <version>1.2.3</version>
</dependency>

SEND LOG TO CONSOLE
콘솔에 로그를 찍기 위해 src/main/resources 폴더 아래 logback.xml 파일을 만들고 다음과 같이 작성합니다.

(패턴 참고)

<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- Console Log Setting -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <encoder>
                <pattern>[%d{yyyy/MM/dd HH:mm:ss}] %highlight(%-5level)| %cyan(%-25.25logger{0}) | %msg%n</pattern>
            </encoder>
        </layout>
    </appender>
 
    <root level="INFO">
        <appender-ref ref="STDOUT" />
    </root>
 
</configuration>


spring에서 프로젝트 생성하면 기본으로 생성되는 log4j.xml은 삭제해도 됩니다. 

설정이 잘 되었다면 아래와 같이 로그가 찍힙니다. 


SEND LOG TO FILE
로그를 파일로 저장하기 위해서 appender를 추가해 줍니다. 

경로 / maxFileSize / maxHistory 등은 변경하시구요 

<appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>E:/logs/debug.log</file>
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
        <pattern>[%-5level] %d{HH:mm:ss.SSS} %logger{36} - %msg%n</pattern>
    </encoder>
    
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        <fileNamePattern>E:/logs/old/debug.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
        <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
            <maxFileSize>50MB</maxFileSize>
        </timeBasedFileNamingAndTriggeringPolicy>
        <maxHistory>15</maxHistory>
    </rollingPolicy>
</appender>


root 에 appender 추가해주시면 됩니다. 

    <root level="INFO">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="file" />
    </root>


ERROR 로그 분리
file로 빼는 appender를 하나 더 만드세요. (위의 것과 비슷한)
경로와 이름을 바꾸신 뒤 appender를 아래와 같이 등록해 줍니다. 
에러 level에 해당하는 로그만 분리되어 저장될 것입니다. 
    <!-- 콘솔 & 파일에 로그 전달-->
    <logger name="com.example" level="debug" additivity="false">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="file" />
    </logger>
 
    <root level="error">
        <appender-ref ref="file-error" />
    </root>



SQL LOGGING
(전 단계의 logger에서 com.example과 같이 이미 포함시켰다면 이 단계는 스킵)

SQL 로그를 찍기 위해 logger를 하나 추가합니다. 
mybatis의 mapper가 들어있는 패키지를 name 안에 넣어 줍니다. 
<!-- 모든 mapper가 같은 패키지 안에 존재할 때 -->
<logger name="com.example.myweb.mapper" level="DEBUG"/>
<!-- mapper가 흩어져 있을 때 -->
<logger name="com.example.myweb.mapper.MyMapper" level="DEBUG"/>



DEBUG 레벨로 설정시 아래와 같은 로그가 찍혔습니다.


TRACE 레벨로 설정하면 Columns와 Row 가 추가로 찍힙니다. 


-----------------------------------------------------------
log4jdbc 적용
slf4j & logback 설정에 이어 log4jdbc를 적용해 보겠습니다. 

MAVEN
추가로 log4jdbc를 받아옵니다. 

<!-- log4jdbc -->
<dependency>
    <groupId>org.bgee.log4jdbc-log4j2</groupId>
    <artifactId>log4jdbc-log4j2-jdbc4.1</artifactId>
    <version>1.16</version>
</dependency>
Colored by Color Scripter
cs
추가설정
src/main/resources 안에 log4jdbc.log4j2.properties 파일을 만듭니다. 

1라인은 필수고 2라인은 쿼리를 정렬하는 용도라서 선택입니다.


log4jdbc.spylogdelegator.name=net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator
log4jdbc.dump.sql.maxlinelength=0



데이터베이스 연결정보를 수정합니다. 

오라클의 경우에도 jdbcUrl 에서 jdbc:log4jdbc:oracle 과 같이 처리하시면 됩니다. 



<entry key="db.driverClassName">net.sf.log4jdbc.sql.jdbcapi.DriverSpy</entry>
<entry key="db.jdbcUrl">jdbc:log4jdbc:mysql://127.0.0.1:3306/schema?autoReconnect=true&amp;useSSL=false&amp;serverTimezone=UTC</entry>
<entry key="db.username">...</entry>
<entry key="db.password">...</entry>


마지막으로 지난번 만들었던 logback.xml 로 가서 logger를 설정해 줍니다.

저는 sqltiming만 나오는걸로 하겠습니다.



<!-- mybatis query log setting -->
<logger name="jdbc" level="OFF" />
<logger name="jdbc.sqlonly" level="ON" />
<logger name="jdbc.sqltiming" level="DEBUG" />
<logger name="jdbc.audit" level="OFF" />
<logger name="jdbc.resultset" level="OFF" />
<logger name="jdbc.resultsettable" level="OFF" />
<logger name="jdbc.connection" level="OFF" />

결과
아래와 같이 파라미터가 들어가 있고 정렬되어 있는 쿼리를 로그로 찍을 수 있습니다. 
